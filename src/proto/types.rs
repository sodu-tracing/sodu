// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ChuckMetadata {
    // message fields
    pub min_start_ts: ::std::option::Option<u64>,
    pub max_start_ts: ::std::option::Option<u64>,
    pub offset: ::std::option::Option<u32>,
    pub length: ::std::option::Option<u32>,
    pub trace_offsets: ::std::vec::Vec<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChuckMetadata {
    fn default() -> &'a ChuckMetadata {
        <ChuckMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ChuckMetadata {
    pub fn new() -> ChuckMetadata {
        ::std::default::Default::default()
    }

    // required uint64 min_start_ts = 1;


    pub fn get_min_start_ts(&self) -> u64 {
        self.min_start_ts.unwrap_or(0)
    }
    pub fn clear_min_start_ts(&mut self) {
        self.min_start_ts = ::std::option::Option::None;
    }

    pub fn has_min_start_ts(&self) -> bool {
        self.min_start_ts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_start_ts(&mut self, v: u64) {
        self.min_start_ts = ::std::option::Option::Some(v);
    }

    // required uint64 max_start_ts = 2;


    pub fn get_max_start_ts(&self) -> u64 {
        self.max_start_ts.unwrap_or(0)
    }
    pub fn clear_max_start_ts(&mut self) {
        self.max_start_ts = ::std::option::Option::None;
    }

    pub fn has_max_start_ts(&self) -> bool {
        self.max_start_ts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_start_ts(&mut self, v: u64) {
        self.max_start_ts = ::std::option::Option::Some(v);
    }

    // required uint32 offset = 3;


    pub fn get_offset(&self) -> u32 {
        self.offset.unwrap_or(0)
    }
    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.offset = ::std::option::Option::Some(v);
    }

    // required uint32 length = 4;


    pub fn get_length(&self) -> u32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }

    // repeated uint32 trace_offsets = 5;


    pub fn get_trace_offsets(&self) -> &[u32] {
        &self.trace_offsets
    }
    pub fn clear_trace_offsets(&mut self) {
        self.trace_offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace_offsets(&mut self, v: ::std::vec::Vec<u32>) {
        self.trace_offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trace_offsets(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.trace_offsets
    }

    // Take field
    pub fn take_trace_offsets(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.trace_offsets, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ChuckMetadata {
    fn is_initialized(&self) -> bool {
        if self.min_start_ts.is_none() {
            return false;
        }
        if self.max_start_ts.is_none() {
            return false;
        }
        if self.offset.is_none() {
            return false;
        }
        if self.length.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_start_ts = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_start_ts = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.offset = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.trace_offsets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.min_start_ts {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_start_ts {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.trace_offsets {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.min_start_ts {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.max_start_ts {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.offset {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(4, v)?;
        }
        for v in &self.trace_offsets {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChuckMetadata {
        ChuckMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_start_ts",
                |m: &ChuckMetadata| { &m.min_start_ts },
                |m: &mut ChuckMetadata| { &mut m.min_start_ts },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_start_ts",
                |m: &ChuckMetadata| { &m.max_start_ts },
                |m: &mut ChuckMetadata| { &mut m.max_start_ts },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "offset",
                |m: &ChuckMetadata| { &m.offset },
                |m: &mut ChuckMetadata| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "length",
                |m: &ChuckMetadata| { &m.length },
                |m: &mut ChuckMetadata| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "trace_offsets",
                |m: &ChuckMetadata| { &m.trace_offsets },
                |m: &mut ChuckMetadata| { &mut m.trace_offsets },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChuckMetadata>(
                "ChuckMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChuckMetadata {
        static instance: ::protobuf::rt::LazyV2<ChuckMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChuckMetadata::new)
    }
}

impl ::protobuf::Clear for ChuckMetadata {
    fn clear(&mut self) {
        self.min_start_ts = ::std::option::Option::None;
        self.max_start_ts = ::std::option::Option::None;
        self.offset = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.trace_offsets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChuckMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChuckMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct TraceIDOffset {
    // message fields
    pub offset: ::std::option::Option<u32>,
    pub hashed_trace_id: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceIDOffset {
    fn default() -> &'a TraceIDOffset {
        <TraceIDOffset as ::protobuf::Message>::default_instance()
    }
}

impl TraceIDOffset {
    pub fn new() -> TraceIDOffset {
        ::std::default::Default::default()
    }

    // required uint32 offset = 1;


    pub fn get_offset(&self) -> u32 {
        self.offset.unwrap_or(0)
    }
    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.offset = ::std::option::Option::Some(v);
    }

    // required uint64 hashed_trace_id = 2;


    pub fn get_hashed_trace_id(&self) -> u64 {
        self.hashed_trace_id.unwrap_or(0)
    }
    pub fn clear_hashed_trace_id(&mut self) {
        self.hashed_trace_id = ::std::option::Option::None;
    }

    pub fn has_hashed_trace_id(&self) -> bool {
        self.hashed_trace_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hashed_trace_id(&mut self, v: u64) {
        self.hashed_trace_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TraceIDOffset {
    fn is_initialized(&self) -> bool {
        if self.offset.is_none() {
            return false;
        }
        if self.hashed_trace_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.offset = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.hashed_trace_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.hashed_trace_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.offset {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.hashed_trace_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceIDOffset {
        TraceIDOffset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "offset",
                |m: &TraceIDOffset| { &m.offset },
                |m: &mut TraceIDOffset| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "hashed_trace_id",
                |m: &TraceIDOffset| { &m.hashed_trace_id },
                |m: &mut TraceIDOffset| { &mut m.hashed_trace_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TraceIDOffset>(
                "TraceIDOffset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TraceIDOffset {
        static instance: ::protobuf::rt::LazyV2<TraceIDOffset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TraceIDOffset::new)
    }
}

impl ::protobuf::Clear for TraceIDOffset {
    fn clear(&mut self) {
        self.offset = ::std::option::Option::None;
        self.hashed_trace_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraceIDOffset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceIDOffset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct TraceIds {
    // message fields
    pub trace_ids: ::std::vec::Vec<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceIds {
    fn default() -> &'a TraceIds {
        <TraceIds as ::protobuf::Message>::default_instance()
    }
}

impl TraceIds {
    pub fn new() -> TraceIds {
        ::std::default::Default::default()
    }

    // repeated uint64 trace_ids = 1;


    pub fn get_trace_ids(&self) -> &[u64] {
        &self.trace_ids
    }
    pub fn clear_trace_ids(&mut self) {
        self.trace_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.trace_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trace_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.trace_ids
    }

    // Take field
    pub fn take_trace_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.trace_ids, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TraceIds {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.trace_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.trace_ids {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.trace_ids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceIds {
        TraceIds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "trace_ids",
                |m: &TraceIds| { &m.trace_ids },
                |m: &mut TraceIds| { &mut m.trace_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TraceIds>(
                "TraceIds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TraceIds {
        static instance: ::protobuf::rt::LazyV2<TraceIds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TraceIds::new)
    }
}

impl ::protobuf::Clear for TraceIds {
    fn clear(&mut self) {
        self.trace_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraceIds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceIds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SegmentMetadata {
    // message fields
    pub min_start_ts: ::std::option::Option<u64>,
    pub max_start_ts: ::std::option::Option<u64>,
    pub chunks: ::protobuf::RepeatedField<ChuckMetadata>,
    pub index: ::std::collections::HashMap<::std::string::String, TraceIds>,
    pub sorted_trace_ids: ::protobuf::RepeatedField<TraceIDOffset>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SegmentMetadata {
    fn default() -> &'a SegmentMetadata {
        <SegmentMetadata as ::protobuf::Message>::default_instance()
    }
}

impl SegmentMetadata {
    pub fn new() -> SegmentMetadata {
        ::std::default::Default::default()
    }

    // required uint64 min_start_ts = 1;


    pub fn get_min_start_ts(&self) -> u64 {
        self.min_start_ts.unwrap_or(0)
    }
    pub fn clear_min_start_ts(&mut self) {
        self.min_start_ts = ::std::option::Option::None;
    }

    pub fn has_min_start_ts(&self) -> bool {
        self.min_start_ts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_start_ts(&mut self, v: u64) {
        self.min_start_ts = ::std::option::Option::Some(v);
    }

    // required uint64 max_start_ts = 2;


    pub fn get_max_start_ts(&self) -> u64 {
        self.max_start_ts.unwrap_or(0)
    }
    pub fn clear_max_start_ts(&mut self) {
        self.max_start_ts = ::std::option::Option::None;
    }

    pub fn has_max_start_ts(&self) -> bool {
        self.max_start_ts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_start_ts(&mut self, v: u64) {
        self.max_start_ts = ::std::option::Option::Some(v);
    }

    // repeated .ChuckMetadata chunks = 3;


    pub fn get_chunks(&self) -> &[ChuckMetadata] {
        &self.chunks
    }
    pub fn clear_chunks(&mut self) {
        self.chunks.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunks(&mut self, v: ::protobuf::RepeatedField<ChuckMetadata>) {
        self.chunks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunks(&mut self) -> &mut ::protobuf::RepeatedField<ChuckMetadata> {
        &mut self.chunks
    }

    // Take field
    pub fn take_chunks(&mut self) -> ::protobuf::RepeatedField<ChuckMetadata> {
        ::std::mem::replace(&mut self.chunks, ::protobuf::RepeatedField::new())
    }

    // repeated .SegmentMetadata.IndexEntry index = 4;


    pub fn get_index(&self) -> &::std::collections::HashMap<::std::string::String, TraceIds> {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::std::collections::HashMap<::std::string::String, TraceIds>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_index(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, TraceIds> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::std::collections::HashMap<::std::string::String, TraceIds> {
        ::std::mem::replace(&mut self.index, ::std::collections::HashMap::new())
    }

    // repeated .TraceIDOffset sorted_trace_ids = 5;


    pub fn get_sorted_trace_ids(&self) -> &[TraceIDOffset] {
        &self.sorted_trace_ids
    }
    pub fn clear_sorted_trace_ids(&mut self) {
        self.sorted_trace_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorted_trace_ids(&mut self, v: ::protobuf::RepeatedField<TraceIDOffset>) {
        self.sorted_trace_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sorted_trace_ids(&mut self) -> &mut ::protobuf::RepeatedField<TraceIDOffset> {
        &mut self.sorted_trace_ids
    }

    // Take field
    pub fn take_sorted_trace_ids(&mut self) -> ::protobuf::RepeatedField<TraceIDOffset> {
        ::std::mem::replace(&mut self.sorted_trace_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SegmentMetadata {
    fn is_initialized(&self) -> bool {
        if self.min_start_ts.is_none() {
            return false;
        }
        if self.max_start_ts.is_none() {
            return false;
        }
        for v in &self.chunks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sorted_trace_ids {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_start_ts = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_start_ts = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chunks)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TraceIds>>(wire_type, is, &mut self.index)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sorted_trace_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.min_start_ts {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_start_ts {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.chunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TraceIds>>(4, &self.index);
        for value in &self.sorted_trace_ids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.min_start_ts {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.max_start_ts {
            os.write_uint64(2, v)?;
        }
        for v in &self.chunks {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TraceIds>>(4, &self.index, os)?;
        for v in &self.sorted_trace_ids {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SegmentMetadata {
        SegmentMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_start_ts",
                |m: &SegmentMetadata| { &m.min_start_ts },
                |m: &mut SegmentMetadata| { &mut m.min_start_ts },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_start_ts",
                |m: &SegmentMetadata| { &m.max_start_ts },
                |m: &mut SegmentMetadata| { &mut m.max_start_ts },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChuckMetadata>>(
                "chunks",
                |m: &SegmentMetadata| { &m.chunks },
                |m: &mut SegmentMetadata| { &mut m.chunks },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TraceIds>>(
                "index",
                |m: &SegmentMetadata| { &m.index },
                |m: &mut SegmentMetadata| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TraceIDOffset>>(
                "sorted_trace_ids",
                |m: &SegmentMetadata| { &m.sorted_trace_ids },
                |m: &mut SegmentMetadata| { &mut m.sorted_trace_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SegmentMetadata>(
                "SegmentMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SegmentMetadata {
        static instance: ::protobuf::rt::LazyV2<SegmentMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SegmentMetadata::new)
    }
}

impl ::protobuf::Clear for SegmentMetadata {
    fn clear(&mut self) {
        self.min_start_ts = ::std::option::Option::None;
        self.max_start_ts = ::std::option::Option::None;
        self.chunks.clear();
        self.index.clear();
        self.sorted_trace_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SegmentMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SegmentMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btypes.proto\"\xa8\x01\n\rChuckMetadata\x12\x20\n\x0cmin_start_ts\
    \x18\x01\x20\x02(\x04R\nminStartTs\x12\x20\n\x0cmax_start_ts\x18\x02\x20\
    \x02(\x04R\nmaxStartTs\x12\x16\n\x06offset\x18\x03\x20\x02(\rR\x06offset\
    \x12\x16\n\x06length\x18\x04\x20\x02(\rR\x06length\x12#\n\rtrace_offsets\
    \x18\x05\x20\x03(\rR\x0ctraceOffsets\"O\n\rTraceIDOffset\x12\x16\n\x06of\
    fset\x18\x01\x20\x02(\rR\x06offset\x12&\n\x0fhashed_trace_id\x18\x02\x20\
    \x02(\x04R\rhashedTraceId\"'\n\x08TraceIds\x12\x1b\n\ttrace_ids\x18\x01\
    \x20\x03(\x04R\x08traceIds\"\xaf\x02\n\x0fSegmentMetadata\x12\x20\n\x0cm\
    in_start_ts\x18\x01\x20\x02(\x04R\nminStartTs\x12\x20\n\x0cmax_start_ts\
    \x18\x02\x20\x02(\x04R\nmaxStartTs\x12&\n\x06chunks\x18\x03\x20\x03(\x0b\
    2\x0e.ChuckMetadataR\x06chunks\x121\n\x05index\x18\x04\x20\x03(\x0b2\x1b\
    .SegmentMetadata.IndexEntryR\x05index\x128\n\x10sorted_trace_ids\x18\x05\
    \x20\x03(\x0b2\x0e.TraceIDOffsetR\x0esortedTraceIds\x1aC\n\nIndexEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1f\n\x05value\x18\x02\
    \x20\x01(\x0b2\t.TraceIdsR\x05value:\x028\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
